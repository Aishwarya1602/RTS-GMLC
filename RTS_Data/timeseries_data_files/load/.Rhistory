library(rplexos)
db = plexos_open('//plexossql/data/moconnel/CA Flexibility Paper/Mark_runs/html')
props = query_property(db)
View(props)
prices = query_interval(db, 'Region', 'Price')
View(prices)
region.prices = dcast(prices, time~name, value.var = 'value')
library(dplyr)
region.prices = dcast(prices, time~name, value.var = 'value')
library(reshape2)
region.prices = dcast(prices, time~name, value.var = 'value')
View(region.prices)
count(region.prices$AESO==0)
count(region.prices$AESO=0)
region.prices$AESO=0
region.prices$AVA==0
sum(region.prices$AVA==0)
region.prices = dcast(prices, time~name, value.var = 'value')
sum(region.prices[,2:44]==0)
zero.prices.hours[1:43] = 0
zero.prices.hours = data.frame(1:43)
View(zero.prices.hours)
zero.price.hours = data.frame(1:43)
zero.price.hours = 0
for ( i in 1:ncol(region.prices)) {
zero.price.hours[i] = sum(region.prices[,i+1]==0)
}
zero.price.hours = data.frame(1:43=0)
zero.price.hours = list()
rm(zero.price.hours)
rm(zero.prices.hours)
zero.price.hours = list()
for ( i in 1:ncol(region.prices)) {
zero.price.hours[i] = sum(region.prices[,i+1]==0)
}
ncol(region.prices)
zero.price.hours = list()
for ( i in 1:ncol(region.prices)-2) {
zero.price.hours[i] = sum(region.prices[,i+1]==0)
}
zero.price.hours = data.frame(matrix(1,43))
View(zero.price.hours)
for ( i in 1:ncol(region.prices)-2) {
zero.price.hours[i] = sum(region.prices[,i+1]==0)
}
ncol(region.prices)-2
zero.price.hours = data.frame(matrix(1,43))
for ( i in 1:ncol(region.prices)-1) {
zero.price.hours[i] = sum(region.prices[,i+1]==0)
}
zero.price.hours = data.frame(matrix(1,43)=0)
zero.price.hours = data.frame(matrix(1,43))
View(zero.price.hours)
zero.price.hours[3]
for ( i in 1:ncol(region.prices)-1) {
zero.price.hours[i,1] = sum(region.prices[,i+1]==0)
}
View(zero.price.hours)
write.csv(region.prices, 'region_prices.csv', row.names = FALSE)
getwd()
View(props)
dc = read.csv('//plexossql/data/moconnel/RTS-2016 Stuff/Davis_PLEXOSformat.csv')
View(dc)
replace = read.csv('//plexossql/data/moconnel/RTS-2016 Stuff/HydroProfiles/DevilCanyon_2024_RTS2016_Hydro.csv')
View(replace)
new = rbind(dc[1:3], replace[2])
new = replace[2]
new2 = new
rm(new2)
rm(new)
str(replace)
replace['Year'] = year(replace[1])
library(lubridate)
replace['Year'] = year(replace[1])
replace[1] = as.POSIXct(replace[1])
replace[1] = as.character(replace[1])
replace = read.csv('//plexossql/data/moconnel/RTS-2016 Stuff/HydroProfiles/DevilCanyon_2024_RTS2016_Hydro.csv')
new = replace
?strptime()
new[1] = strptime(new[1], '%Y-%m-%d %H:%M')
new[1] = strptime(as.character(new[1]), '%Y-%m-%d %H:%M')
test = strptime(as.character(new[1]), '%Y-%m-%d %H:%M')
test
as.character(new[1])
test = as.character(new[1])
View(new)
View(replace)
new= replace
test = as.character(new[1])
test
View(new)
test = strptime(as.character(new[1]), '%Y-%m-%d %H:%M')
test
new
dates = strptime(as.character(new[,1]), '%Y-%m-%d %H:%M')
dates = strptime(as.character(new[,1]), '%Y-%m-%d %H:%M:%S')
View(dc)
View(new)
new[1,1]
str(new)
replace = read.csv('//plexossql/data/moconnel/RTS-2016 Stuff/HydroProfiles/DevilCanyon_2024_RTS2016_Hydro.csv', stringsAsFactors = FALSE)
str(replace)
new = replace
str(new)
new[1] = strptime(new[1], "%Y-%d-%m %H:%M")
new[1] = strptime(new[1], "%Y-%d-%m %H:%M", tz='')
new[1] = strptime(new[1], "%m/%d/%Y %H:%M")
as.character(new[1,1])
new=replace
as.character(new[1,1])
new[1] = strptime(new[1], "%m/%d/%Y %H:%M")
new = replace
date = strptime(new[,1], "%m/%d/%Y %H:%M")
date
new[,1] = strptime(new[,1], "%m/%d/%Y %H:%M")
new=replace
new[1] = date
View(new)
new=replace
date = as.date.frame(date)
date = as.data.frame(date)
new[1] = date
View(new)
new['Year'] = year(new[1])
new['Year'] = year(as.POSIXct(new[1]))
View(new)
str(new)
year(date)
str(date)
?year
year(date[1])
day(new[1,1])
new['Year'] = year(new[,1])
new['Month'] = month(new[,1])
new['Day'] = day(new[,1])
?select
library(reshape2)
?select
library(dplyr)
?select
new = select(new, Year, Month, Day, Value)
View(date)
new = rbind(new, date)
new = cbind(new, date)
new['Hour'] = hour(date)
new['Hour'] = hour(date[,1])
new = select(new, Year, Month, Day, Hour, Value)
formatted = dcast(new, Year+Month+Day~Hour, value.var = 'Value')
View(dc)
View(formatted)
new['Hour'==0] = 24
new['Hour'==0]
new[,'Hour'==0]
new[,'Hour']
new[,'Hour']==0
new[,new$Hour==0]=24
new[,new$Hour==0]=24
new[,new$Hour==0]
new[,'Hour'][new$Hour==0]
new[,'Hour'][new$Hour==0]=24
formatted = dcast(new, Year+Month+Day~Hour, value.var = 'Value')
colnames(formatted)
formatted$NA = NULL
formatted['NA'] = NULL
formatted[367] = NULL
formatted[367,] = NULL
formatted = formatted[1:366,]
View(formatted)
getwd()
write.csv(formatted, 'DC.csv', row.names=FALSE)
View(replace)
sum(replace[2])
View(replace)
sum(replace[2])
new = replace
str(new)
new[,1] = strptime(new[,1], '%m/%d/%Y %H:%M')
new = replace
date = strptime(new[,1], '%m/%d/%Y %H:%M')
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
View(date)
new['Year'] = year(date)
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new = select(new, Year, Month, Day, Hour, Value)
new = dcast(new, Year+Month+Day~Hour, value.var='Value')
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new = select(new, Year, Month, Day, Hour, Value)
new[,'Hour'][new$Hour==0]=24
sum(new$Value)
new = dcast(new, Year+Month+Day~Hour, value.var='Value')
sum(new[,4:27])
sum(new)
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new = select(new, Year, Month, Day, Hour, Value)
new[,'Hour'][new$Hour==0]=24
is.na(new)
sum(is.na(new))
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new = select(new, Year, Month, Day, Hour, Value)
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new[1658,]
new['Year'] = year(date[,1])
new['Year'] = year(date[,1])
new[1658,]
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new[1658,]
new[1658,'Year']=2024
new[1658,]
new[1658,'Year']=2024
new[1657,'Year']=2024
new[1657,]
new[1659,]
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new[1658,'Year']=2024
new[1658,'Month']=3
new[1658,'Day']=10
new[1658,'Hour']=2
new = select(new, Year, Month, Day, Hour, Value)
new[,'Hour'][new$Hour==0]=24
new = dcast(new, Year+Month+Day~Hour, value.var='Value')
new = replace
date = as.data.frame(strptime(new[,1], '%m/%d/%Y %H:%M'))
new['Year'] = year(date[,1])
new['Month'] = month(date[,1])
new['Day'] = day(date[,1])
new['Hour'] = hour(date[,1])
new[1658,'Year']=2024
new[1658,'Month']=3
new[1658,'Day']=10
new[1658,'Hour']=2
new = select(new, Year, Month, Day, Hour, Value)
new[,'Hour'][new$Hour==0]=24
hear(new)
head(new)
sum(new$Value)
new = dcast(new, Year+Month+Day~Hour, value.var='Value')
write.csv(new, 'DC.csv', row.names=FALSE)
sum(replace[2])
mingen = read.csv('C:/users/moconnel/documents/RTS-2016/mingen.csv')
mingen = read.csv('C:\users\moconnel\documents\RTS-2016\mingen.csv')
mingen = read.csv('C:/users/moconnel/documents/RTS-2016/gen_updates/mingen.csv')
head(mingen)
library(dplyr)
?reshape
?dcast
library(reshape2)
?dcast
avg_mingen = dcast(mingen, Type~Percent.of.Max.Cap, value.var = 'Percent.of.Max.Cap', fun.aggregate=sum)
View(avg_mingen)
avg_mingen = dcast(mingen, Type~Percent.of.Max.Cap, fun.aggregate=sum)
avg_mingen = dcast(mingen, Type~., value.var='Percent.of.Max.Cap', fun.aggregate=sum)
View(avg_mingen)
avg_mingen = dcast(mingen, Type~., value.var='Percent.of.Max.Cap', fun.aggregate=mean)
View(avg_mingen)
View(mingen)
sum_mingen = dcast(mingen, Type~., value.var='MaxCap', fun.aggregate=sum)
View(sum_mingen)
View(mingen)
View(sum_mingen)
mingen = join(mingen, sum_mingen, by="Type")
library(plyr)
?join
mingen = join(mingen, sum_mingen, by="Type")
View(mingen)
View(sum_mingen)
View(mingen)
mingen$PercentTotalCap = mingen$MaxCap/mingen$.
mingen$WeightedMaxCapPercent = mingen$Min.Stable / mingen$MaxCap * mingen$PercentTotalCap
weighted_mingen = dcast(mingen, Type~., variable.var="WeightedMaxCapPercent", fun.aggregate=sum)
weighted_mingen = dcast(mingen, Type~., value.var="WeightedMaxCapPercent", fun.aggregate=sum)
View(weighted_mingen)
region_lpf = read.csv('region_lpf.csv')
library(data.table)
library(dplyr)
library(reshape2)
setwd('//nrelqnap01d/PLEXOS/Projects/IM3')
region_lpf = read.csv('region_lpf.csv')
head(region_lpf)
region_lpf_spring = filter(region_lpf, Time=='Spring')
region_lpf_spring = filter(region_lpf, Time=='2024_Spring')
region_lpf_autumn = filter(region_lpf, Time=='2024_Autumn')
head(region_lpf)
region_lpf_winter = filter(region_lpf, Time=='2024_Winter')
region_lpf_summer = filter(region_lpf, Time=='2024_Summer')
View(region_lpf_autumn)
View(region_lpf_spring)
View(region_lpf_summer)
View(region_lpf_winter)
View(region_lpf_autumn)
node_zone = read.csv('node_zone.csv')
View(node_zone)
View(node_zone)
View(region_lpf_autumn)
region_lpf_spring = join(region_lpf_spring, node_zone, by='Node')
library(plyr)
region_lpf_spring = join(region_lpf_spring, node_zone, by='Node')
View(region_lpf_spring)
region_lpf = read.csv('region_lpf.csv')
region_lpf_spring = filter(region_lpf, Time=='2024_Spring')
region_lpf_autumn = filter(region_lpf, Time=='2024_Autumn')
region_lpf_winter = filter(region_lpf, Time=='2024_Winter')
region_lpf_summer = filter(region_lpf, Time=='2024_Summer')
node_zone = read.csv('node_zone.csv')
region_lpf_spring = join(region_lpf_spring, node_zone, by='Node')
region_lpf_autumn = join(region_lpf_autumn, node_zone, by='Node')
region_lpf_winter = join(region_lpf_winter, node_zone, by='Node')
region_lpf_summer = join(region_lpf_summer, node_zone, by='Node')
View(region_lpf_autumn)
region_lpf = read.csv('region_lpf.csv')
region_lpf = data.table(region_lpf)
region_lpf_spring = filter(region_lpf, Time=='2024_Spring')
region_lpf_autumn = filter(region_lpf, Time=='2024_Autumn')
region_lpf_winter = filter(region_lpf, Time=='2024_Winter')
region_lpf_summer = filter(region_lpf, Time=='2024_Summer')
node_zone = read.csv('node_zone.csv')
node_zone = data.table(node_zone)
region_lpf_spring = join(region_lpf_spring, node_zone, by='Node')
region_lpf_autumn = join(region_lpf_autumn, node_zone, by='Node')
region_lpf_winter = join(region_lpf_winter, node_zone, by='Node')
region_lpf_summer = join(region_lpf_summer, node_zone, by='Node')
region_sum = region_lpf_spring[,.(LPF_sum=sum(LPF)), by=.(Region)]
View(region_sum)
sum(region_sum$LPF_sum
)
region_sum_spring = region_lpf_spring[,.(LPF_sum=sum(LPF)), by=.(Region)]
region_sum_summer = region_lpf_summer[,.(LPF_sum=sum(LPF)), by=.(Region)]
region_sum_autumn = region_lpf_autumn[,.(LPF_sum=sum(LPF)), by=.(Region)]
region_sum_winter = region_lpf_winter[,.(LPF_sum=sum(LPF)), by=.(Region)]
sum(region_sum_spring$LPF_sum)
sum(region_sum_summer$LPF_sum)
sum(region_sum_winter$LPF_sum)
sum(region_sum_autumn$LPF_sum)
View(node_zone)
region_sum_spring = region_sum_spring[,.(region_sum=sum(LPF)), by=.(Region)]
region_sum_summer = region_sum_summer[,.(region_sum=sum(LPF)), by=.(Region)]
region_sum_autumn = region_sum_autumn[,.(region_sum=sum(LPF)), by=.(Region)]
region_sum_winter = region_sum_winter[,.(region_sum=sum(LPF)), by=.(Region)]
View(region_lpf_spring)
region_sum_spring[,.(region_sum=sum(LPF)), by=.(Region)]
View(region_sum_spring)
str(region_sum_spring)
rm(region_sum)
county_sum_spring = region_lpf_spring[,.(LPF_sum=sum(LPF)), by=.(County, State, Country)]
View(county_sum_spring)
unique(region_lpf_autumn[,c('County', 'State', 'Country')])
View(region_lpf_autumn)
write.csv(region_lpf_autumn, 'test.csv', row.names=FALSE)
View(county_sum_spring)
lpf = read.csv('region_lpf.csv')
lpf = data.table(lpf)
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_autumn = filter(lpf, Time=='2024_Autumn')
lpf_winter = filter(lpf, Time=='2024_Winter')
lpf_summer = filter(lpf, Time=='2024_Summer')
node_zone = read.csv('node_zone.csv')
node_zone = data.table(node_zone)
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_autumn = join(lpf_autumn, node_zone, by='Node')
lpf_winter = join(lpf_winter, node_zone, by='Node')
lpf_summer = join(lpf_summer, node_zone, by='Node')
View(lpf_autumn)
View(lpf_autumn)
lpf_sum_spring = lpf_spring[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
View(lpf_sum_spring)
county_sum_spring = lpf_spring[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
lpf = read.csv('region_lpf.csv')
lpf = data.table(lpf)
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_autumn = filter(lpf, Time=='2024_Autumn')
lpf_winter = filter(lpf, Time=='2024_Winter')
lpf_summer = filter(lpf, Time=='2024_Summer')
node_zone = read.csv('node_zone.csv')
node_zone = data.table(node_zone)
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_autumn = join(lpf_autumn, node_zone, by='Node')
lpf_winter = join(lpf_winter, node_zone, by='Node')
lpf_summer = join(lpf_summer, node_zone, by='Node')
region_sum_spring = lpf_spring[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
region_sum_summer = lpf_summer[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
region_sum_autumn = lpf_autumn[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
region_sum_winter = lpf_winter[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
county_sum_spring = lpf_spring[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
county_sum_summer = lpf_summer[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
county_sum_autumn = lpf_autumn[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
county_sum_winter = lpf_winter[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
View(county_sum_autumn)
View(region_sum_autumn)
lpf = read.csv('region_lpf.csv')
lpf = data.table(lpf)
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_autumn = filter(lpf, Time=='2024_Autumn')
lpf_winter = filter(lpf, Time=='2024_Winter')
lpf_summer = filter(lpf, Time=='2024_Summer')
node_zone = read.csv('node_zone.csv')
node_zone = data.table(node_zone)
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_autumn = join(lpf_autumn, node_zone, by='Node')
lpf_winter = join(lpf_winter, node_zone, by='Node')
lpf_summer = join(lpf_summer, node_zone, by='Node')
region_sum_spring = lpf_spring[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
region_sum_summer = lpf_summer[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
region_sum_autumn = lpf_autumn[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
region_sum_winter = lpf_winter[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
county_sum_spring = lpf_spring[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
county_sum_summer = lpf_summer[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
county_sum_autumn = lpf_autumn[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
county_sum_winter = lpf_winter[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
View(county_sum_autumn)
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_spring = lpf_spring[,.(LPF_region_sum=sum(LPF)), by=.(Region)]
lpf_spring = lpf_spring[,.(LPF_county_sum=sum(LPF)), by=.(County, State, Country)]
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_spring = lpf_spring[,.(LPF_region_sum:=sum(LPF)), by=.(Region)]
lpf_spring = lpf_spring[, LPF_region_sum := sum(LPF), by=.(Region)]
View(region_sum_spring)
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_spring_test = lpf_spring[,LPF_region_sum := sum(LPF), by=Region]
View(lpf_spring_test)
View(region_sum_autumn)
View(lpf_spring_test)
View(region_sum_autumn)
lpf_spring_test = lpf_spring[,LPF_region_sum = sum(LPF), by=Region]
lpf_spring_test = lpf_spring[, .(LPF_region_sum = sum(LPF)), by=Region]
View(lpf_spring_test)
lpf_spring_test = join(lpf_spring, lpf_spring[, .(LPF_region_sum = sum(LPF)), by=Region], by='Node')
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_spring_test = join(lpf_spring, lpf_spring[, .(LPF_region_sum = sum(LPF)), by=Region], by='Node')
lpf_spring[, .(LPF_region_sum = sum(LPF)), by=Region]
View(lpf_spring)
View(lpf_spring)
lpf_spring_test = join(lpf_spring, lpf_spring[, .(LPF_region_sum = sum(LPF)), by=Region], by='Region')
View(lpf_spring_test)
lpf_spring[, .(LPF_county_sum = sum(LPF)), by=.(County, State, Country)]
lpf_spring[, .(LPF_county_sum = sum(LPF)), by=.(County, State, Country)]
View(lpf_spring)
lpf_spring = join(lpf_spring, lpf_spring[, .(LPF_county_sum = sum(LPF)), by=.(County, State, Country)], by=c('County', 'State', 'Country'))
View(lpf_spring)
f
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_spring = filter(lpf, Time=='2024_Spring')
lpf_spring = join(lpf_spring, node_zone, by='Node')
lpf_spring = join(lpf_spring, lpf_spring[, .(LPF_region_sum = sum(LPF)), by=Region], by='Region')
lpf_spring = join(lpf_spring, lpf_spring[, .(LPF_county_sum = sum(LPF)), by=.(County, State, Country)], by=c('County', 'State', 'Country'))
View(lpf_spring)
View(county_sum_autumn)
library(data.table)
setwd(dirname(sys.frame(1)$ofile))
setwd('C:/users/moconnel/documents/RTS-2016')
setwd('RTS2016_test_plexos_database/')
setwd('data_files/load')
da.reg1 <- fread("Melted_APS_2020.csv")
da.reg1[,c("V1", "Hour", "Minutes") := NULL]
View(da.reg1)
da.reg1[,Period := 1:24, by = .(Year, Month, Day)]
View(da.reg1)
setnames(da.reg1, "Load", "1")
View(da.reg1)
da.reg2 <- fread("Melted_NEVP_2020.csv")
da.reg3 <- fread("Melted_LDWP_2020.csv")
da.reg2[,c("V1", "Hour", "Minutes") := NULL]
da.reg2[,Period := 1:24, by = .(Year, Month, Day)]
setnames(da.reg2, "Load", "2")
da.reg3[,c("V1", "Hour", "Minutes") := NULL]
da.reg3[,Period := 1:24, by = .(Year, Month, Day)]
setnames(da.reg3, "Load", "3")
# DA: combine
da.load <- Reduce(function(...) merge(..., all = TRUE),
list(da.reg1, da.reg2, da.reg3))
View(da.reg1)
View(da.reg2)
View(da.reg3)
da.load <- Reduce(function(...) merge(..., all = TRUE),
list(da.reg1, da.reg2, da.reg3))
